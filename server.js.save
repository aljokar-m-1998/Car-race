// === إعداد السيرفر الأساسي ===
const fs = require("fs");
const path = require("path");
const express = require("express");
const app = express();
const http = require("http").createServer(app);
const io = require("socket.io")(http);
// ===== IMPORTS =====
const fs = require("fs");
const path = require("path");
const express = require("express");
const app = express();
const http = require("http").createServer(app);
const io = require("socket.io")(http);

// ===== PATHS =====
const PUBLIC_DIR = path.join(__dirname, "public");
const IMG_DIR = path.join(PUBLIC_DIR, "images");
const SND_DIR = path.join(PUBLIC_DIR, "sounds");

// ===== CREATE FILES/FOLDERS IF NOT EXIST =====
function setupFiles() {
  if (!fs.existsSync(PUBLIC_DIR)) fs.mkdirSync(PUBLIC_DIR);
  if (!fs.existsSync(IMG_DIR)) fs.mkdirSync(IMG_DIR);
  if (!fs.existsSync(SND_DIR)) fs.mkdirSync(SND_DIR);

  // HTML
  const html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Snake & Ladder Online</title>
  <link rel="stylesheet" href="style.css"/>
</head>
<body>
  <h1>🎮 Snake & Ladder Online</h1>
  <canvas id="board" width="500" height="500"></canvas>
  <div class="controls">
    <button id="roll">🎲 Roll Dice</button>
    <div id="dice">0</div>
  </div>
  <audio id="dice-sound" src="sounds/dice.mp3"></audio>
  <audio id="snake-sound" src="sounds/snake.mp3"></audio>
  <audio id="ladder-sound" src="sounds/ladder.mp3"></audio>
  <audio id="win-sound" src="sounds/win.mp3"></audio>
  <script src="/socket.io/socket.io.js"></script>
  <script src="game.js"></script>
</body>
</html>`;
  fs.writeFileSync(path.join(PUBLIC_DIR, "index.html"), html);

  // CSS
  const css = `body {
  font-family: Arial, sans-serif;
  background: linear-gradient(to bottom, #87ceeb, #ffffff);
  text-align: center;
  margin: 0;
  padding: 0;
}
h1 {
  margin: 15px;
  color: #333;
}
canvas {
  border: 4px solid #444;
  border-radius: 15px;
  background: #fff;
  margin: 10px auto;
  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}
.controls { margin-top: 15px; }
button {
  padding: 15px 30px;
  font-size: 22px;
  background: #ffcc00;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  box-shadow: 0 3px 8px rgba(0,0,0,0.3);
}
button:active { transform: scale(0.95); }
#dice {
  font-size: 24px;
  margin-top: 10px;
  color: #333;
}`;
  fs.writeFileSync(path.join(PUBLIC_DIR, "style.css"), css);

  // GAME.JS
  const js = `const socket = io();
const canvas = document.getElementById("board");
const ctx = canvas.getContext("2d");
const size = 50, boardSize = 10;
const playerColors = ["red", "blue"];
let players = [{pos:1},{pos:1}];
let myIndex = Math.random() > 0.5 ? 0 : 1;
let currentPlayer = 0;

const snakes = {16:6,48:30,62:19,79:23,93:68};
const ladders = {2:38,7:14,8:31,15:26,28:84};

const diceSound = document.getElementById("dice-sound");
const snakeSound = document.getElementById("snake-sound");
const ladderSound = document.getElementById("ladder-sound");
const winSound = document.getElementById("win-sound");

const snakeImg = new Image();
snakeImg.src = "images/snake.png";
const ladderImg = new Image();
ladderImg.src = "images/ladder.png";

function getCoords(pos){
  let row = Math.floor((pos-1)/boardSize);
  let col = (row%2===0)?(pos-1)%boardSize:boardSize-1-(pos-1)%boardSize;
  return {x:col*size,y:(boardSize-1-row)*size};
}
function drawBoard(){
  ctx.clearRect(0,0,canvas.width,canvas.height);
  let num=100;
  for(let row=0;row<boardSize;row++){
    for(let col=0;col<boardSize;col++){
      let x=(row%2===0)?col*size:(boardSize-1-col)*size;
      let y=(boardSize-1-row)*size;
      ctx.fillStyle=(num%2===0)?"#d0e1f9":"#f9f9f9";
      ctx.fillRect(x,y,size,size);ctx.strokeRect(x,y,size,size);
      ctx.fillStyle="#000";ctx.font="12px Arial";ctx.fillText(num,x+5,y+15);
      num--;
    }
  }
  for(let s in ladders){
    let e=ladders[s];let ec=getCoords(e);
    ctx.drawImage(ladderImg, ec.x+5, ec.y+5, size*0.8, size*2);
  }
  for(let s in snakes){
    let e=snakes[s];let ec=getCoords(e);
    ctx.drawImage(snakeImg, ec.x+5, ec.y+5, size, size*2);
  }
  players.forEach((p,i)=>{
    let c=getCoords(p.pos);ctx.beginPath();
    ctx.arc(c.x+25,c.y+25,15,0,2*Math.PI);
    ctx.fillStyle=playerColors[i];ctx.fill();
  });
}
drawBoard();

function rollDice(){
  if(currentPlayer!==myIndex)return alert("Not your turn!");
  diceSound.play();
  let dice=Math.floor(Math.random()*6)+1;
  document.getElementById("dice").textContent=dice;
  movePlayer(myIndex,dice,true);
  socket.emit("move",{player:myIndex,dice});
}
function movePlayer(i,dice,changeTurn){
  let p=players[i];p.pos+=dice;if(p.pos>100)p.pos=100;
  if(ladders[p.pos]){p.pos=ladders[p.pos];ladderSound.play();}
  if(snakes[p.pos]){p.pos=snakes[p.pos];snakeSound.play();}
  drawBoard();
  if(p.pos===100){winSound.play();alert(\`Player \${i+1} wins!\`);
    players=[{pos:1},{pos:1}];drawBoard();return;}
  if(changeTurn)currentPlayer=(currentPlayer+1)%2;
}
socket.on("move",data=>{movePlayer(data.player,data.dice,true);});
document.getElementById("roll").addEventListener("click",rollDice);`;
  fs.writeFileSync(path.join(PUBLIC_DIR, "game.js"), js);

  // DUMMY FILES
  ["snake.png","ladder.png"].forEach(f=>{
    let p = path.join(IMG_DIR,f);if(!fs.existsSync(p))fs.writeFileSync(p,"");
  });
  ["dice.mp3","snake.mp3","ladder.mp3","win.mp3"].forEach(f=>{
    let p = path.join(SND_DIR,f);if(!fs.existsSync(p))fs.writeFileSync(p,"");
  });
}
setupFiles();

// ===== SERVER =====
app.use(express.static(PUBLIC_DIR));
io.on("connection", (socket) => {
  console.log("Player connected");
  socket.on("move", (data) => socket.broadcast.emit("move", data));
});
const PORT = process.env.PORT || 3000;
http.listen(PORT, () => console.log(\`Server running: http://localhost:\${PORT}\`));
const PUBLIC_DIR = path.join(__dirname, "public");
const IMG_DIR = path.join(PUBLIC_DIR, "images");
const SND_DIR = path.join(PUBLIC_DIR, "sounds");

// === إنشاء الملفات والمجلدات أول مرة ===
function ensureFiles() {4000
  if (!fs.existsSync(PUBLIC_DIR)) fs.mkdirSync(PUBLIC_DIR);
  if (!fs.existsSync(IMG_DIR)) fs.mkdirSync(IMG_DIR);
  if (!fs.existsSync(SND_DIR)) fs.mkdirSync(SND_DIR);

  // index.html
  const indexHtml = `<!DOCTYPE html>
<html lang="a
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>🎲 سلم وثعبان أونلاين</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <h1>🎮 سلم وثعبان أونلاين</h1>
  <canvas id="board" width="500" height="500"></canvas>
  <div class="controls">
    <button id="roll">🎲 رمي النرد</button>
    <div id="dice">0</div>
  </div>
  <audio id="dice-sound" src="sounds/dice.mp3"></audio>
  <audio id="snake-sound" src="sounds/snake.mp3"></audio>
  <audio id="ladder-sound" src="sounds/ladder.mp3"></audio>
  <audio id="win-sound" src="sounds/win.mp3"></audio>
  <script src="/socket.io/socket.io.js"></script>
  <script src="game.js"></script>
</body>
</html>`;
  fs.writeFileSync(path.join(PUBLIC_DIR, "index.html"), indexHtml);

  // style.css
  const css = `body {
  font-family: 'Arial', sans-serif;
  background: linear-gradient(to bottom, #87ceeb, #ffffff);
  text-align: center;
  margin: 0;
  padding: 0;
}
h1 {
  margin: 15px;
  color: #333;
}
canvas {
  border: 4px solid #444;
  border-radius: 15px;
  background: #fff;
  margin: 10px auto;
  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}
.controls {
  margin-top: 15px;
}
button {
  padding: 15px 30px;
  font-size: 22px;
  background: #ffcc00;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  box-shadow: 0 3px 8px rgba(0,0,0,0.3);
}
button:active {
  transform: scale(0.95);
}
#dice {
  font-size: 24px;
  margin-top: 10px;
  color: #333;
}`;
  fs.writeFileSync(path.join(PUBLIC_DIR, "style.css"), css);

  // game.js
  const gameJs = `const socket = io();
const canvas = document.getElementById("board");
const ctx = canvas.getContext("2d");
const size = 50;
const boardSize = 10;
const playerColors = ["red", "blue"];
let players = [{pos:1}, {pos:1}];
let myIndex = Math.random() > 0.5 ? 0 : 1; 
let currentPlayer = 0;

const snakes = {16:6, 48:30, 62:19, 79:23, 93:68};
const ladders = {2:38, 7:14, 8:31, 15:26, 28:84};

const diceSound = document.getElementById("dice-sound");
const snakeSound = document.getElementById("snake-sound");
const ladderSound = document.getElementById("ladder-sound");
const winSound = document.getElementById("win-sound");

const snakeImg = new Image();
snakeImg.src = "images/snake.png";
const ladderImg = new Image();
ladderImg.src = "images/ladder.png";

function getCoords(pos){
  let row = Math.floor((pos-1)/boardSize);
  let col = (row%2===0)?(pos-1)%boardSize:boardSize-1-(pos-1)%boardSize;
  return {x: col*size, y: (boardSize-1-row)*size};
}

function drawBoard(){
  ctx.clearRect(0,0,canvas.width,canvas.height);
  let num=100;
  for(let row=0;row<boardSize;row++){
    for(let col=0;col<boardSize;col++){
      let x=(row%2===0)?col*size:(boardSize-1-col)*size;
      let y=(boardSize-1-row)*size;
      ctx.fillStyle=(num%2===0)?"#d0e1f9":"#f9f9f9";
      ctx.fillRect(x,y,size,size);ctx.strokeRect(x,y,size,size);
      ctx.fillStyle="#000";ctx.font="12px Arial";ctx.fillText(num,x+5,y+15);num--;
    }
  }
  for(let s in ladders){let e = ladders[s];let ec=getCoords(e);
    ctx.drawImage(ladderImg, ec.x+5, ec.y+5, size*0.8, size*2);}
  for(let s in snakes){let e = snakes[s];let ec=getCoords(e);
    ctx.drawImage(snakeImg, ec.x+5, ec.y+5, size, size*2);}
  players.forEach((p,i)=>{let c=getCoords(p.pos);ctx.beginPath();ctx.arc(c.x+25,c.y+25,15,0,2*Math.PI);ctx.fillStyle=playerColors[i];ctx.fill();});
}
drawBoard();

function rollDice(){
  if(currentPlayer!==myIndex)return alert("مش دورك!");
  diceSound.play();
  let dice=Math.floor(Math.random()*6)+1;
  document.getElementById("dice").textContent=dice;
  movePlayer(myIndex,dice,true);
  socket.emit("move",{player:myIndex,dice});
}

function movePlayer(i,dice,changeTurn){
  let p=players[i];p.pos+=dice;if(p.pos>100)p.pos=100;
  if(ladders[p.pos]){p.pos=ladders[p.pos];ladderSound.play();}
  if(snakes[p.pos]){p.pos=snakes[p.pos];snakeSound.play();}
  drawBoard();
  if(p.pos===100){winSound.play();alert(\`🎉 اللاعب \${i+1} فاز!\`);players=[{pos:1},{pos:1}];drawBoard();return;}
  if(changeTurn)currentPlayer=(currentPlayer+1)%2;
}
socket.on("move",data=>{movePlayer(data.player,data.dice,true);});
document.getElementById("roll").addEventListener("click",rollDice);`;
  fs.writeFileSync(path.join(PUBLIC_DIR, "game.js"), gameJs);

  // صور وصوتيات (فارغة مؤقتًا)
  if (!fs.existsSync(path.join(IMG_DIR, "snake.png"))) fs.writeFileSync(path.join(IMG_DIR, "snake.png"), "");
  if (!fs.existsSync(path.join(IMG_DIR, "ladder.png"))) fs.writeFileSync(path.join(IMG_DIR, "ladder.png"), "");
  ["dice.mp3","snake.mp3","ladder.mp3","win.mp3"].forEach(f=>{
    if(!fs.existsSync(path.join(SND_DIR,f))) fs.writeFileSync(path.join(SND_DIR,f),"");
  });
}
ensureFiles();

// === إعداد السيرفر ===
app.use(express.static(PUBLIC_DIR));

io.on("connection", (socket) => {
  console.log("🎮 لاعب دخل اللعبة");
  socket.on("move", (data) => socket.broadcast.emit("move", data));
});

const PORT = process.env.PORT || 3000;
http.listen(PORT, () => console.log(\`🚀 اللعبة شغالة على: http://localhost:\${PORT}\`));
